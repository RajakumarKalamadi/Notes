Object Orientred Programming language

In software engineering anythig that we have can be mapped to blueprint or vision. For example, in Amazon, every product has similar struture, we can generalise this make sure we don't repeat anything again and again

"Classes"

Classes are blueprint on a set of real life entities.
Classes are going to represent how an entity should look and behave. When I say how do they look, I refer to the properties they posses. And when I say how they behave then I mean what actions can be performed on them.

Let's Take an example:
Consider a product class, inside this product class what do you think should be the properties of a product? What is a Property ? Propertry is just any feauture that the product can contain.
> Name -> Name of the product
> Price -> price of the product
> Company -> Company of the product belongs to


Object 

Using classes the fonal entity that will develop is called as a object.


"How new Works" ?


"This keyword of JS"

> this in JS works very differently then other language.
> this is a keyword is available to be acessed in any function or even outside any function and in classes as well.
> if we can use this keyword anywhere, then what is the value stored inside this ?

IN MOST OF THE CASES THID REFERS TO CALL SITE.

  Ahhh! What is a call site ?

Call site can be an object, or a position or may be even the new keyword. it refers to the entity which is calling this keyword.

let obj = {
    x : 10,
    y : 20,
    z : {
        x : 10,
        fn : function(){
            return [this.x, this.y];
        }
    }
}

let obj = {
    x : 10,
    y : 20,
    fn : function(){
        return [this.x, this.y];
    }
}

console.log(obj.fn());


console.log(obj.z.fn());

"Exception"
It has an exception, this keyword will not refer to the call site if used inside an arrow function.

let obj = {
    x : 10,
    y : 20,
    fn : function(){
        const arrow = ()=>{
            return [this.x, this.y];
        }
        return arrow();

    }
}

console.log(obj.fn());


In this code this is present inside the arrow function, hence we will resolve it lexically.

1) is this defined in the scope of arrow function ? No
2) we go one scope up, i.e inside function fn.
3) is this defined inside fn ? Yes because fn function is normal function we have a defination of this inside it which is the call site.
4) who is the call site ? obj object is responsible to trigger function fn so call site is obj.
5) hence this refers to obj object and when we call arrow fucntion we get output 10, 20


That means, when we make a new object using new keyword then new keyword creats a plain object and this plain objects is the call site for the construtor hence, this keyword refers to the plain object altogether.

Problems with current class implementation 

  

In the current implementation, we don't add any security on the updating of the values of the data members in the class. 

After object creation, anyone can come up and update the object the object of our class without any issue. 

This violates a fundamental principle of OOPs, called as Encapsulation. It says that, classes are a bundle of implementation of themselves. In any case we should not require to modify the data members of a class outside the class. Why, because then our data members will be allocated any random value without any issue. 

To resolve this, we can hide  out data members from being accessed outside the class. How ? 

In JS, we can make our data members private I.e. the data members will be accessible for read and write only inside the class. 

To make a data member private, we just prepend # before it's declaration 

 


 

 

Here, name price description model are private they cannot be accessed outside of the class 





"Builder Design Pattern"

Assume we have a class like this:

class product{
    #name;
    #price;
    #description;
    #model

    constructor(productName, productPrice, productDescription, productModel....){
        this.#name = productName;
        this.#price = productPrice;
        this.#description = productDescription;
        this.#model = productModel;
        .....
    }
}

We have a big problem here that, the constructor has too many param and when calling the constructor we have to remeber which param are going to have which value in the right sequence.

To avoid this we can use the defualt construtor and instead of using new constructor to allocate values we can use getter setters.


class Product_2{
    #name;
    #price;
    #category;
    ...


    get name(){}
    set name(name){}
    get price(){}
    set price(price){}
    get category()
    set category(category){}
}

If we use this approch then we cannot apply validation to the object before it's creation. Due to any reson if we want a senario where due to some validation not being fulfilled we have to stop the creation 
of object then it is not possible here, because to use getter setter we have to first create the object and then only we can get or set the value.






 
